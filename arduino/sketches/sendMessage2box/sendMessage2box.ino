#include <SPI.h>
#include "RF24.h"
  #include <Servo.h>

RF24 radio(9, 10);

byte addresses[][6] = {
  "BoxPc", "PcBox"};

byte imageArray[] = 
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,204,66,136,240,0,165,168,64,96,249,36,146,182,0,136,200,0,192,64,2,36,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,64,240,0,112,218,132,75,224,0,144,94,130,76,192,68,112,248,0,34,184,32,216,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,200,2,136,32,64,145,220,32,96,224,0,160,184,0,136,68,128,144,224,0,36,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,92,244,4,68,220,0,105,226,130,146,186,2,14,226,38,114,186,2,106,250,98,194,226,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,6,134,6,70,182,230,134,199,94,38,46,166,66,226,90,130,130,230,2,6,202,6,186,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,0,0,0,0,0,0,6,70,198,6,70,246,6,39,166,6,214,246,6,6,230,66,242,178,34,98,226,195,195,243,0,32,32,0,32,32,2,0,2,2,16,18,2,16,18,2,80,82,2,16,18,2,16,18,6,166,54,134,150,134,6,135,214,230,39,102,6,246,214,2,2,98,130,150,246,3,43,235,4,0,4,6,32,38,2,48,50,0,16,16,0,0,0,0,0,0,0,64,64,2,0,2,68,84,196,6,102,246,4,196,164,6,87,214,6,134,166,38,118,246,2,194,66,67,67,155,0,0,0,6,16,22,4,32,36,0,32,32,0,0,0,0,0,0,0,64,64,0,0,0,6,166,246,6,22,198,134,134,246,70,39,118,4,68,70,70,134,150,2,50,242,131,171,227,0,0,0,2,16,18,4,0,4,4,32,36,0,32,32,0,0,0,0,64,64,0,0,0,6,6,6,70,102,118,6,87,70,6,199,198,38,182,246,134,102,230,0,192,96,3,83,211,2,16,18,2,0,2,0,0,0,4,0,4,0,32,32,0,96,96,0,0,0,0,0,0,134,70,198,6,134,134,6,135,182,134,54,182,6,6,134,6,150,182,34,34,146,3,131,163,2,16,18,0,0,0,0,0,0,4,0,4,4,0,4,0,96,96,8,32,40,0,8,8,6,198,198,6,7,198,70,71,70,6,135,198,6,198,102,194,98,226,2,130,226,3,99,227,2,64,66,0,0,0,0,0,0,0,0,0,4,64,68,8,64,72,8,32,40,0,40,40,194,2,2,6,198,198,134,6,198,6,199,198,6,39,134,2,194,194,34,98,98,3,3,99,2,66,64,0,64,64,0,64,64,0,64,64,12,96,76,12,0,12,0,0,0,1,1,0,6,198,198,6,6,198,6,198,134,2,2,66,66,67,66,2,2,66,66,2,2,3,99,99,2,2,0,0,0,0,0,0,0,8,0,8,8,32,8,4,0,4,4,0,4,0,0,0,6,6,2,2,66,70,66,2,66,2,67,66,2,3,66,2,66,66,2,66,66,3,3,67,2,2,0,0,0,0,8,0,8,8,32,8,0,32,0,0,32,0,4,0,4,4,0,4,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,1,1,1,10,2,8,10,2,8,8,0,8,0,32,0,0,32,0,0,32,0,0,0,0,4,0,4,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,0,0,0,1,1,1,0,0,0,2,2,0,2,34,0,0,32,0,0,32,0,0,32,0,0,32,0,0,0,0,0,0,0,2,2,2,2,2,2,2,3,2,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,2,34,0,2,34,0,0,32,0,0,32,0,0,32,0,0,0,0,2,2,2,2,2,2,2,2,2,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,96,0,0,96,0,0,96,0,2,34,0,0,32,0,0,32,0,0,48,0,0,48,0,2,2,2,0,0,0,2,3,2,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,96,0,8,104,0,0,96,0,2,114,0,0,112,0,0,112,0,0,48,0,0,48,0,130,2,2,0,0,0,0,1,0,0,1,0,64,0,0,64,0,0,64,0,0,65,1,1,8,104,0,8,104,0,0,96,0,2,34,0,0,32,0,0,32,0,0,48,0,0,48,0,130,2,2,130,2,2,64,1,0,64,1,0,64,0,0,64,0,0,64,0,0,65,1,1,8,8,0,8,8,0,0,32,0,2,34,0,0,32,0,0,32,0,0,32,0,0,0,0,194,2,2,194,2,2,194,3,2,64,0,0,64,0,0,64,0,0,64,0,0,65,1,1,12,12,0,12,12,0,2,34,0,2,34,0,0,32,0,0,32,0,0,32,0,4,4,0,194,2,2,194,2,2,194,3,2,192,0,0,64,0,0,64,0,0,64,0,0,97,1,1,8,8,0,12,12,0,6,6,0,4,36,0,4,36,0,0,32,0,4,4,0,4,4,0,194,2,2,194,2,2,194,3,2,194,2,2,192,0,0,64,0,0,96,0,0,97,1,1,8,8,0,12,12,0,6,6,0,4,36,0,4,36,0,4,36,0,4,4,0,4,4,0,194,2,2,194,2,2,194,3,2,194,2,2,194,2,2,96,0,0,96,0,0,97,1,1,8,8,0,8,8,0,14,14,0,4,4,0,4,36,0,4,4,0,4,4,0,4,4,0,194,2,2,194,2,2,194,3,2,194,3,2,226,2,2,98,2,2,96,0,0,97,1,1,8,8,0,8,8,0,10,10,0,12,12,0,12,44,0,12,12,0,4,4,0,4,4,0,194,2,2,194,2,2,194,2,2,226,3,2,226,2,2,98,2,2,98,2,2,97,1,1,8,8,0,10,10,0,10,10,0,12,12,0,12,12,0,12,12,0,12,12,0,12,12,0,194,2,2,194,2,2,194,2,2,226,3,2,98,2,2,96,0,0,98,2,2,97,1,1,10,10,0,10,10,0,8,8,0,12,12,0,12,12,0,12,12,0,4,4,0,4,4,0,198,6,6,194,2,2,226,3,2,224,1,0,98,2,2,98,2,2,98,2,2,99,3,3}
;

void setup() {
Servo firstESC;
  firstESC.attach(6);
  firstESC.writeMicroseconds(0);
  delay(2000);
  firstESC.writeMicroseconds(700);
    delay(2000);
  firstESC.writeMicroseconds(900);


  Serial.begin(57600);
  randomSeed(analogRead(0));
  radio.begin();

  radio.setPALevel(RF24_PA_MAX);

  radio.openWritingPipe(addresses[1]);
  radio.openReadingPipe(1, addresses[0]);
}

typedef struct RF24Message
{
  byte action;
  unsigned int length;
} 
RF24Message;

RF24Message message;
const byte messageSize = sizeof(message);
const byte cycles = 90;

const byte bufferSize = 32;
byte buffer[bufferSize];

void sendImage(){
  radio.stopListening();    

  message.length = cycles * bufferSize;
  message.action = 168;
  while(!radio.write(&message, messageSize)){
    delay(20);
  }
  radio.txStandBy();
  
  for (int p= 0; p<2; p++) {
    byte* image = imageArray;
    for(int c=0; c<cycles/2; c++){  
      memcpy(&buffer, image, bufferSize);
      image += bufferSize;  
      while(!radio.writeFast(&buffer, bufferSize)){       
        Serial.println("Fail: " + String(c));
        delay(20);      
      }
      radio.txStandBy();
    }
  }
  Serial.println("Sended");
}

void sendRandomImage(){
  radio.stopListening();    

  message.length = cycles * bufferSize;
  message.action = 168;
  while(!radio.write(&message, messageSize)){
    delay(20);
  }
  radio.txStandBy();

  for(int c=0; c<cycles; c++){   
    for (byte i=0; i<bufferSize; i++){
      buffer[i] = 255;//;(byte)random(256);
    } 

    while(!radio.writeFast(&buffer, bufferSize)){       
      Serial.println("Fail: " + String(c));
      delay(20);      
    }
    radio.txStandBy();
  }

  Serial.println("Sended");
}

void loop() {
  if (!Serial.available())
    return;
    
  String received = Serial.readString();

  Serial.println("Received: "+received);
  if (received == "i")
    sendImage();
  else
    sendRandomImage();
  /*
  //
   char *msg = (char *)&message;
   Serial.readBytes(msg, 3);
   Serial.println(message.action);
   Serial.println(message.messageLength);
   */
} 







